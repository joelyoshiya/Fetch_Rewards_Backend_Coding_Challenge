package main

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

// define structs
type Item struct {
	ShortDescription string  `json:"shortDescription"` // from client
	Price            float64 `json:"price"`            // from client
}

type Items struct {
	Items []Item `json:"items"` // from client
}

type Receipt struct {
	ID           string  `json:"id"`           // from service
	Points       int     `json:"points"`       // from service
	Retailer     string  `json:"retailer"`     // from client
	PurchaseDate string  `json:"purchaseDate"` // from client
	PurchaseTime string  `json:"purchaseTime"` // from client
	Total        float64 `json:"total"`        // from client
	Items        []Item  `json:"items"`        // from client
}

type Receipts struct {
	ReceiptsMap map[string]Receipt `json:"receipts"` // map of receipts, key is ID
}

// constructor for receipts
func NewReceipts() *Receipts {
	var rs Receipts
	rs.ReceiptsMap = make(map[string]Receipt)
	return &rs
}

// global receipts object
var rs = NewReceipts() // pointer to receipt object, in place of persisting data struct

// setup router
func setupRouter() *gin.Engine {
	r := gin.Default()
	// define routes
	r.GET("/ping", func(c *gin.Context) {
		c.String(http.StatusOK, "pong")
	})
	// process receipt
	r.POST("/receipts/process", processReceipt)
	// get points
	r.GET("/receipts/:id/points", getPoints)

	return r
}

func main() {
	r := setupRouter()
	// run server
	r.Run(":8080")
}

// Route Funcions

// Path: /receipts/process
// Method: POST
// Payload: Receipt JSON
// Response: JSON containing an id for the receipt.
// Description:
// Takes in a JSON receipt (see example in the example directory) and returns a JSON object with an ID generated by your code.
// The ID returned is the ID that should be passed into /receipts/{id}/points to get the number of points the receipt was awarded.
// How many points should be earned are defined by the rules below.
// Reminder: Data does not need to survive an application restart. This is to allow you to use in-memory solutions to track any data generated by this endpoint.
func processReceipt(c *gin.Context) {
	// New items, receipt objects
	// var i Items
	var r Receipt

	// generate ID
	r.ID = uuid.New().String()
	// get retailer
	// get purchase date
	// get purchase time
	// get total
	// get items

	// generate points

	// append to global Receipts object's map
	(*rs).ReceiptsMap[r.ID] = r

}

// Path: /receipts/{id}/points
// Method: GET
// Response: A JSON object containing the number of points awarded.
// A simple Getter endpoint that looks up the receipt by the ID and returns an object specifying the points awarded.
func getPoints(c *gin.Context) {
	// get ID
	// get receipt object with ID from receipts
	// get points from receipt object

}
